// Autogenerated by Frugal Compiler (0.0.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

library todo_service.src.frug_todos;

import 'dart:async';

import 'package:thrift/thrift.dart' as thrift;
import 'package:frugal/frugal.dart' as frugal;

import 'todo.dart' as t_todo;


const String delimiter = '.';

class TodosPublisher {
  frugal.Transport transport;
  thrift.TProtocol protocol;
  int seqId;

  TodosPublisher(frugal.Provider provider) {
    var tp = provider.newTransportProtocol();
    transport = tp.transport;
    protocol = tp.protocol;
    seqId = 0;
  }

  Future publishTodoCreated(String account, String membership, t_todo.Todo req) {
    var op = "TodoCreated";
    var prefix = "${account}.${membership}.";
    var topic = "${prefix}Todos${delimiter}${op}";
    transport.preparePublish(topic);
    var oprot = protocol;
    seqId++;
    var msg = new thrift.TMessage(op, thrift.TMessageType.CALL, seqId);
    oprot.writeMessageBegin(msg);
    req.write(oprot);
    oprot.writeMessageEnd();
    return oprot.transport.flush();
  }


  Future publishTodoDeleted(String account, String membership, t_todo.Todo req) {
    var op = "TodoDeleted";
    var prefix = "${account}.${membership}.";
    var topic = "${prefix}Todos${delimiter}${op}";
    transport.preparePublish(topic);
    var oprot = protocol;
    seqId++;
    var msg = new thrift.TMessage(op, thrift.TMessageType.CALL, seqId);
    oprot.writeMessageBegin(msg);
    req.write(oprot);
    oprot.writeMessageEnd();
    return oprot.transport.flush();
  }


  Future publishTodoUpdated(String account, String membership, t_todo.Todo req) {
    var op = "TodoUpdated";
    var prefix = "${account}.${membership}.";
    var topic = "${prefix}Todos${delimiter}${op}";
    transport.preparePublish(topic);
    var oprot = protocol;
    seqId++;
    var msg = new thrift.TMessage(op, thrift.TMessageType.CALL, seqId);
    oprot.writeMessageBegin(msg);
    req.write(oprot);
    oprot.writeMessageEnd();
    return oprot.transport.flush();
  }
}


class TodosSubscriber {
  final frugal.Provider provider;

  TodosSubscriber(this.provider) {}

  Future<frugal.Subscription> subscribeTodoCreated(String account, String membership, dynamic onTodo(t_todo.Todo req)) async {
    var op = "TodoCreated";
    var prefix = "${account}.${membership}.";
    var topic = "${prefix}Todos${delimiter}${op}";
    var tp = provider.newTransportProtocol();
    await tp.transport.subscribe(topic);
    tp.transport.signalRead.listen((_) {
      onTodo(_recvTodoCreated(op, tp.protocol));
    });
    var sub = new frugal.Subscription(topic, tp.transport);
    tp.transport.error.listen((Error e) {;
      sub.signal(e);
    });
    return sub;
  }

  t_todo.Todo _recvTodoCreated(String op, thrift.TProtocol iprot) {
    var tMsg = iprot.readMessageBegin();
    if (tMsg.name != op) {
      thrift.TProtocolUtil.skip(iprot, thrift.TType.STRUCT);
      iprot.readMessageEnd();
      throw new thrift.TApplicationError(
      thrift.TApplicationErrorType.UNKNOWN_METHOD, tMsg.name);
    }
    var req = new t_todo.Todo();
    req.read(iprot);
    iprot.readMessageEnd();
    return req;
  }


  Future<frugal.Subscription> subscribeTodoDeleted(String account, String membership, dynamic onTodo(t_todo.Todo req)) async {
    var op = "TodoDeleted";
    var prefix = "${account}.${membership}.";
    var topic = "${prefix}Todos${delimiter}${op}";
    var tp = provider.newTransportProtocol();
    await tp.transport.subscribe(topic);
    tp.transport.signalRead.listen((_) {
      onTodo(_recvTodoDeleted(op, tp.protocol));
    });
    var sub = new frugal.Subscription(topic, tp.transport);
    tp.transport.error.listen((Error e) {;
      sub.signal(e);
    });
    return sub;
  }

  t_todo.Todo _recvTodoDeleted(String op, thrift.TProtocol iprot) {
    var tMsg = iprot.readMessageBegin();
    if (tMsg.name != op) {
      thrift.TProtocolUtil.skip(iprot, thrift.TType.STRUCT);
      iprot.readMessageEnd();
      throw new thrift.TApplicationError(
      thrift.TApplicationErrorType.UNKNOWN_METHOD, tMsg.name);
    }
    var req = new t_todo.Todo();
    req.read(iprot);
    iprot.readMessageEnd();
    return req;
  }


  Future<frugal.Subscription> subscribeTodoUpdated(String account, String membership, dynamic onTodo(t_todo.Todo req)) async {
    var op = "TodoUpdated";
    var prefix = "${account}.${membership}.";
    var topic = "${prefix}Todos${delimiter}${op}";
    var tp = provider.newTransportProtocol();
    await tp.transport.subscribe(topic);
    tp.transport.signalRead.listen((_) {
      onTodo(_recvTodoUpdated(op, tp.protocol));
    });
    var sub = new frugal.Subscription(topic, tp.transport);
    tp.transport.error.listen((Error e) {;
      sub.signal(e);
    });
    return sub;
  }

  t_todo.Todo _recvTodoUpdated(String op, thrift.TProtocol iprot) {
    var tMsg = iprot.readMessageBegin();
    if (tMsg.name != op) {
      thrift.TProtocolUtil.skip(iprot, thrift.TType.STRUCT);
      iprot.readMessageEnd();
      throw new thrift.TApplicationError(
      thrift.TApplicationErrorType.UNKNOWN_METHOD, tMsg.name);
    }
    var req = new t_todo.Todo();
    req.read(iprot);
    iprot.readMessageEnd();
    return req;
  }
}

