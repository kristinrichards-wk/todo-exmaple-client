/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library todo.src.todo_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:todo_service/todo_service.dart';
import 'package:base_service/base_service.dart';


abstract class TodoService {

  /// Creates the requested Todo. Returns the representation of the
  /// created Todo with a generated ID and the userId attached.
  /// 
  /// @param rc
  /// @param todo
  Future<Todo> createTodo(RequestContext rc, Todo todo);

  /// Deletes the Todo identified by todoId as long as the given user
  /// is also the creator.
  /// 
  /// @param rc
  /// @param todoID
  Future deleteTodo(RequestContext rc, String todoID);

  /// Query for a set of Todos based on the isCompleted and isPublic
  /// values.
  /// 
  /// @param rc
  /// @param params
  Future<List<Todo>> queryTodos(RequestContext rc, TodoQueryParams params);

  /// Updates the requested Todo as long as the given user is also the
  /// creator.
  /// 
  /// @param rc
  /// @param todo
  Future<Todo> updateTodo(RequestContext rc, Todo todo);
}

class TodoServiceClient implements TodoService {

  TodoServiceClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future<Todo> createTodo(RequestContext rc, Todo todo) async {
    oprot.writeMessageBegin(new TMessage("createTodo", TMessageType.CALL, nextSeqid()));
    createTodo_args args = new createTodo_args();
    args.rc = rc;
    args.todo = todo;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    createTodo_result result = new createTodo_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.err != null) {
      throw result.err;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "createTodo failed: unknown result");
  }

  Future deleteTodo(RequestContext rc, String todoID) async {
    oprot.writeMessageBegin(new TMessage("deleteTodo", TMessageType.CALL, nextSeqid()));
    deleteTodo_args args = new deleteTodo_args();
    args.rc = rc;
    args.todoID = todoID;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    deleteTodo_result result = new deleteTodo_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.err != null) {
      throw result.err;
    }
    return;
  }

  Future<List<Todo>> queryTodos(RequestContext rc, TodoQueryParams params) async {
    oprot.writeMessageBegin(new TMessage("queryTodos", TMessageType.CALL, nextSeqid()));
    queryTodos_args args = new queryTodos_args();
    args.rc = rc;
    args.params = params;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    queryTodos_result result = new queryTodos_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.err != null) {
      throw result.err;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "queryTodos failed: unknown result");
  }

  Future<Todo> updateTodo(RequestContext rc, Todo todo) async {
    oprot.writeMessageBegin(new TMessage("updateTodo", TMessageType.CALL, nextSeqid()));
    updateTodo_args args = new updateTodo_args();
    args.rc = rc;
    args.todo = todo;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    updateTodo_result result = new updateTodo_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.err != null) {
      throw result.err;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "updateTodo failed: unknown result");
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class TodoServiceProcessor implements TProcessor {
  TodoServiceProcessor(TodoService iface) {
    iface_ = iface;
    PROCESS_MAP["createTodo"] = createTodo;
    PROCESS_MAP["deleteTodo"] = deleteTodo;
    PROCESS_MAP["queryTodos"] = queryTodos;
    PROCESS_MAP["updateTodo"] = updateTodo;
  }

  TodoService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  createTodo(int seqid, TProtocol iprot, TProtocol oprot) async {
    createTodo_args args = new createTodo_args();
    args.read(iprot);
    iprot.readMessageEnd();
    createTodo_result result = new createTodo_result();
    try {
      result.success = await iface_.createTodo(args.rc, args.todo);
    } on WError catch(err) {
      result.err = err;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing createTodo");
      oprot.writeMessageBegin(new TMessage("createTodo", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("createTodo", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  deleteTodo(int seqid, TProtocol iprot, TProtocol oprot) {
    deleteTodo_args args = new deleteTodo_args();
    args.read(iprot);
    iprot.readMessageEnd();
    deleteTodo_result result = new deleteTodo_result();
    try {
      iface_.deleteTodo(args.rc, args.todoID);
    } on WError catch(err) {
      result.err = err;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing deleteTodo");
      oprot.writeMessageBegin(new TMessage("deleteTodo", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("deleteTodo", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  queryTodos(int seqid, TProtocol iprot, TProtocol oprot) async {
    queryTodos_args args = new queryTodos_args();
    args.read(iprot);
    iprot.readMessageEnd();
    queryTodos_result result = new queryTodos_result();
    try {
      result.success = await iface_.queryTodos(args.rc, args.params);
    } on WError catch(err) {
      result.err = err;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing queryTodos");
      oprot.writeMessageBegin(new TMessage("queryTodos", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("queryTodos", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  updateTodo(int seqid, TProtocol iprot, TProtocol oprot) async {
    updateTodo_args args = new updateTodo_args();
    args.read(iprot);
    iprot.readMessageEnd();
    updateTodo_result result = new updateTodo_result();
    try {
      result.success = await iface_.updateTodo(args.rc, args.todo);
    } on WError catch(err) {
      result.err = err;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing updateTodo");
      oprot.writeMessageBegin(new TMessage("updateTodo", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("updateTodo", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class createTodo_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("createTodo_args");
  static final TField _RC_FIELD_DESC = new TField("rc", TType.STRUCT, 1);
  static final TField _TODO_FIELD_DESC = new TField("todo", TType.STRUCT, 2);

  RequestContext _rc;
  static const int RC = 1;
  Todo _todo;
  static const int TODO = 2;


  createTodo_args() {
  }

  // rc
  RequestContext get rc => this._rc;

  set rc(RequestContext rc) {
    this._rc = rc;
  }

  bool isSetRc() => this.rc != null;

  unsetRc() {
    this.rc = null;
  }

  // todo
  Todo get todo => this._todo;

  set todo(Todo todo) {
    this._todo = todo;
  }

  bool isSetTodo() => this.todo != null;

  unsetTodo() {
    this.todo = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case RC:
        return this.rc;
      case TODO:
        return this.todo;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case RC:
        if (value == null) {
          unsetRc();
        } else {
          this.rc = value;
        }
        break;

      case TODO:
        if (value == null) {
          unsetTodo();
        } else {
          this.todo = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case RC:
        return isSetRc();
      case TODO:
        return isSetTodo();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case RC:
          if (field.type == TType.STRUCT) {
            this.rc = new RequestContext();
            this.rc.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TODO:
          if (field.type == TType.STRUCT) {
            this.todo = new Todo();
            this.todo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.rc != null) {
      oprot.writeFieldBegin(_RC_FIELD_DESC);
      this.rc.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.todo != null) {
      oprot.writeFieldBegin(_TODO_FIELD_DESC);
      this.todo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("createTodo_args(");

    ret.write("rc:");
    if (this.rc == null) {
      ret.write("null");
    } else {
      ret.write(this.rc);
    }

    ret.write(", ");
    ret.write("todo:");
    if (this.todo == null) {
      ret.write("null");
    } else {
      ret.write(this.todo);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class createTodo_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("createTodo_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _ERR_FIELD_DESC = new TField("err", TType.STRUCT, 1);

  Todo _success;
  static const int SUCCESS = 0;
  WError _err;
  static const int ERR = 1;


  createTodo_result() {
  }

  // success
  Todo get success => this._success;

  set success(Todo success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // err
  WError get err => this._err;

  set err(WError err) {
    this._err = err;
  }

  bool isSetErr() => this.err != null;

  unsetErr() {
    this.err = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case ERR:
        return this.err;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          this.err = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new Todo();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ERR:
          if (field.type == TType.STRUCT) {
            this.err = new WError();
            this.err.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetErr()) {
      oprot.writeFieldBegin(_ERR_FIELD_DESC);
      this.err.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("createTodo_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("err:");
    if (this.err == null) {
      ret.write("null");
    } else {
      ret.write(this.err);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class deleteTodo_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("deleteTodo_args");
  static final TField _RC_FIELD_DESC = new TField("rc", TType.STRUCT, 1);
  static final TField _TODO_ID_FIELD_DESC = new TField("todoID", TType.STRING, 2);

  RequestContext _rc;
  static const int RC = 1;
  String _todoID;
  static const int TODOID = 2;


  deleteTodo_args() {
  }

  // rc
  RequestContext get rc => this._rc;

  set rc(RequestContext rc) {
    this._rc = rc;
  }

  bool isSetRc() => this.rc != null;

  unsetRc() {
    this.rc = null;
  }

  // todoID
  String get todoID => this._todoID;

  set todoID(String todoID) {
    this._todoID = todoID;
  }

  bool isSetTodoID() => this.todoID != null;

  unsetTodoID() {
    this.todoID = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case RC:
        return this.rc;
      case TODOID:
        return this.todoID;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case RC:
        if (value == null) {
          unsetRc();
        } else {
          this.rc = value;
        }
        break;

      case TODOID:
        if (value == null) {
          unsetTodoID();
        } else {
          this.todoID = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case RC:
        return isSetRc();
      case TODOID:
        return isSetTodoID();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case RC:
          if (field.type == TType.STRUCT) {
            this.rc = new RequestContext();
            this.rc.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TODOID:
          if (field.type == TType.STRING) {
            this.todoID = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.rc != null) {
      oprot.writeFieldBegin(_RC_FIELD_DESC);
      this.rc.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.todoID != null) {
      oprot.writeFieldBegin(_TODO_ID_FIELD_DESC);
      oprot.writeString(this.todoID);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("deleteTodo_args(");

    ret.write("rc:");
    if (this.rc == null) {
      ret.write("null");
    } else {
      ret.write(this.rc);
    }

    ret.write(", ");
    ret.write("todoID:");
    if (this.todoID == null) {
      ret.write("null");
    } else {
      ret.write(this.todoID);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class deleteTodo_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("deleteTodo_result");
  static final TField _ERR_FIELD_DESC = new TField("err", TType.STRUCT, 1);

  WError _err;
  static const int ERR = 1;


  deleteTodo_result() {
  }

  // err
  WError get err => this._err;

  set err(WError err) {
    this._err = err;
  }

  bool isSetErr() => this.err != null;

  unsetErr() {
    this.err = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ERR:
        return this.err;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          this.err = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ERR:
        return isSetErr();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ERR:
          if (field.type == TType.STRUCT) {
            this.err = new WError();
            this.err.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetErr()) {
      oprot.writeFieldBegin(_ERR_FIELD_DESC);
      this.err.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("deleteTodo_result(");

    ret.write("err:");
    if (this.err == null) {
      ret.write("null");
    } else {
      ret.write(this.err);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class queryTodos_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("queryTodos_args");
  static final TField _RC_FIELD_DESC = new TField("rc", TType.STRUCT, 1);
  static final TField _PARAMS_FIELD_DESC = new TField("params", TType.STRUCT, 2);

  RequestContext _rc;
  static const int RC = 1;
  TodoQueryParams _params;
  static const int PARAMS = 2;


  queryTodos_args() {
  }

  // rc
  RequestContext get rc => this._rc;

  set rc(RequestContext rc) {
    this._rc = rc;
  }

  bool isSetRc() => this.rc != null;

  unsetRc() {
    this.rc = null;
  }

  // params
  TodoQueryParams get params => this._params;

  set params(TodoQueryParams params) {
    this._params = params;
  }

  bool isSetParams() => this.params != null;

  unsetParams() {
    this.params = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case RC:
        return this.rc;
      case PARAMS:
        return this.params;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case RC:
        if (value == null) {
          unsetRc();
        } else {
          this.rc = value;
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          this.params = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case RC:
        return isSetRc();
      case PARAMS:
        return isSetParams();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case RC:
          if (field.type == TType.STRUCT) {
            this.rc = new RequestContext();
            this.rc.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARAMS:
          if (field.type == TType.STRUCT) {
            this.params = new TodoQueryParams();
            this.params.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.rc != null) {
      oprot.writeFieldBegin(_RC_FIELD_DESC);
      this.rc.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.params != null) {
      oprot.writeFieldBegin(_PARAMS_FIELD_DESC);
      this.params.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("queryTodos_args(");

    ret.write("rc:");
    if (this.rc == null) {
      ret.write("null");
    } else {
      ret.write(this.rc);
    }

    ret.write(", ");
    ret.write("params:");
    if (this.params == null) {
      ret.write("null");
    } else {
      ret.write(this.params);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class queryTodos_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("queryTodos_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.LIST, 0);
  static final TField _ERR_FIELD_DESC = new TField("err", TType.STRUCT, 1);

  List<Todo> _success;
  static const int SUCCESS = 0;
  WError _err;
  static const int ERR = 1;


  queryTodos_result() {
  }

  // success
  List<Todo> get success => this._success;

  set success(List<Todo> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // err
  WError get err => this._err;

  set err(WError err) {
    this._err = err;
  }

  bool isSetErr() => this.err != null;

  unsetErr() {
    this.err = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case ERR:
        return this.err;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          this.err = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.success = new List<Todo>();
              for (int _i1 = 0; _i1 < _list0.length; ++_i1) {
                Todo _elem2;
                _elem2 = new Todo();
                _elem2.read(iprot);
                this.success.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ERR:
          if (field.type == TType.STRUCT) {
            this.err = new WError();
            this.err.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.success.length));
        for (var elem3 in this.success) {
          elem3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    } else if (this.isSetErr()) {
      oprot.writeFieldBegin(_ERR_FIELD_DESC);
      this.err.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("queryTodos_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("err:");
    if (this.err == null) {
      ret.write("null");
    } else {
      ret.write(this.err);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateTodo_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateTodo_args");
  static final TField _RC_FIELD_DESC = new TField("rc", TType.STRUCT, 1);
  static final TField _TODO_FIELD_DESC = new TField("todo", TType.STRUCT, 2);

  RequestContext _rc;
  static const int RC = 1;
  Todo _todo;
  static const int TODO = 2;


  updateTodo_args() {
  }

  // rc
  RequestContext get rc => this._rc;

  set rc(RequestContext rc) {
    this._rc = rc;
  }

  bool isSetRc() => this.rc != null;

  unsetRc() {
    this.rc = null;
  }

  // todo
  Todo get todo => this._todo;

  set todo(Todo todo) {
    this._todo = todo;
  }

  bool isSetTodo() => this.todo != null;

  unsetTodo() {
    this.todo = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case RC:
        return this.rc;
      case TODO:
        return this.todo;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case RC:
        if (value == null) {
          unsetRc();
        } else {
          this.rc = value;
        }
        break;

      case TODO:
        if (value == null) {
          unsetTodo();
        } else {
          this.todo = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case RC:
        return isSetRc();
      case TODO:
        return isSetTodo();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case RC:
          if (field.type == TType.STRUCT) {
            this.rc = new RequestContext();
            this.rc.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TODO:
          if (field.type == TType.STRUCT) {
            this.todo = new Todo();
            this.todo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.rc != null) {
      oprot.writeFieldBegin(_RC_FIELD_DESC);
      this.rc.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.todo != null) {
      oprot.writeFieldBegin(_TODO_FIELD_DESC);
      this.todo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateTodo_args(");

    ret.write("rc:");
    if (this.rc == null) {
      ret.write("null");
    } else {
      ret.write(this.rc);
    }

    ret.write(", ");
    ret.write("todo:");
    if (this.todo == null) {
      ret.write("null");
    } else {
      ret.write(this.todo);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class updateTodo_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateTodo_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _ERR_FIELD_DESC = new TField("err", TType.STRUCT, 1);

  Todo _success;
  static const int SUCCESS = 0;
  WError _err;
  static const int ERR = 1;


  updateTodo_result() {
  }

  // success
  Todo get success => this._success;

  set success(Todo success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // err
  WError get err => this._err;

  set err(WError err) {
    this._err = err;
  }

  bool isSetErr() => this.err != null;

  unsetErr() {
    this.err = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case ERR:
        return this.err;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          this.err = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new Todo();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ERR:
          if (field.type == TType.STRUCT) {
            this.err = new WError();
            this.err.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetErr()) {
      oprot.writeFieldBegin(_ERR_FIELD_DESC);
      this.err.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateTodo_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("err:");
    if (this.err == null) {
      ret.write("null");
    } else {
      ret.write(this.err);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

