/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library todo_service.src.todo;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:todo_service/todo_service.dart';
import 'package:base_service/base_service.dart';

class Todo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Todo");
  static final TField _USER_ID_FIELD_DESC = new TField("userID", TType.STRING, 1);
  static final TField _DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, 2);
  static final TField _DUE_DATE_FIELD_DESC = new TField("dueDate", TType.I64, 3);
  static final TField _ID_FIELD_DESC = new TField("id", TType.STRING, 4);
  static final TField _IS_COMPLETED_FIELD_DESC = new TField("isCompleted", TType.BOOL, 5);
  static final TField _IS_PUBLIC_FIELD_DESC = new TField("isPublic", TType.BOOL, 6);
  static final TField _NOTES_FIELD_DESC = new TField("notes", TType.STRING, 7);

  /// User that created the Todo
  String _userID;
  static const int USERID = 1;
  /// Todo title
  String _description;
  static const int DESCRIPTION = 2;
  /// Due date (milliseconds since epoch)
  int _dueDate;
  static const int DUEDATE = 3;
  /// Todo ID
  String _id;
  static const int ID = 4;
  /// Whether or not the Todo has been marked as completed
  bool _isCompleted;
  static const int ISCOMPLETED = 5;
  /// Whether or not the Todo is public (viewable by all users)
  bool _isPublic;
  static const int ISPUBLIC = 6;
  /// Todo notes
  String _notes;
  static const int NOTES = 7;

  bool __isset_dueDate = false;
  bool __isset_isCompleted = false;
  bool __isset_isPublic = false;

  Todo() {
  }

  // userID
  /// User that created the Todo
  String get userID => this._userID;

  /// User that created the Todo
  set userID(String userID) {
    this._userID = userID;
  }

  bool isSetUserID() => this.userID != null;

  unsetUserID() {
    this.userID = null;
  }

  // description
  /// Todo title
  String get description => this._description;

  /// Todo title
  set description(String description) {
    this._description = description;
  }

  bool isSetDescription() => this.description != null;

  unsetDescription() {
    this.description = null;
  }

  // dueDate
  /// Due date (milliseconds since epoch)
  int get dueDate => this._dueDate;

  /// Due date (milliseconds since epoch)
  set dueDate(int dueDate) {
    this._dueDate = dueDate;
    this.__isset_dueDate = true;
  }

  bool isSetDueDate() => this.__isset_dueDate;

  unsetDueDate() {
    this.__isset_dueDate = false;
  }

  // id
  /// Todo ID
  String get id => this._id;

  /// Todo ID
  set id(String id) {
    this._id = id;
  }

  bool isSetId() => this.id != null;

  unsetId() {
    this.id = null;
  }

  // isCompleted
  /// Whether or not the Todo has been marked as completed
  bool get isCompleted => this._isCompleted;

  /// Whether or not the Todo has been marked as completed
  set isCompleted(bool isCompleted) {
    this._isCompleted = isCompleted;
    this.__isset_isCompleted = true;
  }

  bool isSetIsCompleted() => this.__isset_isCompleted;

  unsetIsCompleted() {
    this.__isset_isCompleted = false;
  }

  // isPublic
  /// Whether or not the Todo is public (viewable by all users)
  bool get isPublic => this._isPublic;

  /// Whether or not the Todo is public (viewable by all users)
  set isPublic(bool isPublic) {
    this._isPublic = isPublic;
    this.__isset_isPublic = true;
  }

  bool isSetIsPublic() => this.__isset_isPublic;

  unsetIsPublic() {
    this.__isset_isPublic = false;
  }

  // notes
  /// Todo notes
  String get notes => this._notes;

  /// Todo notes
  set notes(String notes) {
    this._notes = notes;
  }

  bool isSetNotes() => this.notes != null;

  unsetNotes() {
    this.notes = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case USERID:
        return this.userID;
      case DESCRIPTION:
        return this.description;
      case DUEDATE:
        return this.dueDate;
      case ID:
        return this.id;
      case ISCOMPLETED:
        return this.isCompleted;
      case ISPUBLIC:
        return this.isPublic;
      case NOTES:
        return this.notes;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case USERID:
        if (value == null) {
          unsetUserID();
        } else {
          this.userID = value;
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          this.description = value;
        }
        break;

      case DUEDATE:
        if (value == null) {
          unsetDueDate();
        } else {
          this.dueDate = value;
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case ISCOMPLETED:
        if (value == null) {
          unsetIsCompleted();
        } else {
          this.isCompleted = value;
        }
        break;

      case ISPUBLIC:
        if (value == null) {
          unsetIsPublic();
        } else {
          this.isPublic = value;
        }
        break;

      case NOTES:
        if (value == null) {
          unsetNotes();
        } else {
          this.notes = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case USERID:
        return isSetUserID();
      case DESCRIPTION:
        return isSetDescription();
      case DUEDATE:
        return isSetDueDate();
      case ID:
        return isSetId();
      case ISCOMPLETED:
        return isSetIsCompleted();
      case ISPUBLIC:
        return isSetIsPublic();
      case NOTES:
        return isSetNotes();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case USERID:
          if (field.type == TType.STRING) {
            this.userID = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DESCRIPTION:
          if (field.type == TType.STRING) {
            this.description = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DUEDATE:
          if (field.type == TType.I64) {
            this.dueDate = iprot.readI64();
            this.__isset_dueDate = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ID:
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ISCOMPLETED:
          if (field.type == TType.BOOL) {
            this.isCompleted = iprot.readBool();
            this.__isset_isCompleted = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ISPUBLIC:
          if (field.type == TType.BOOL) {
            this.isPublic = iprot.readBool();
            this.__isset_isPublic = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTES:
          if (field.type == TType.STRING) {
            this.notes = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.userID != null) {
      oprot.writeFieldBegin(_USER_ID_FIELD_DESC);
      oprot.writeString(this.userID);
      oprot.writeFieldEnd();
    }
    if (this.description != null) {
      oprot.writeFieldBegin(_DESCRIPTION_FIELD_DESC);
      oprot.writeString(this.description);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_DUE_DATE_FIELD_DESC);
    oprot.writeI64(this.dueDate);
    oprot.writeFieldEnd();
    if (this.id != null) {
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_IS_COMPLETED_FIELD_DESC);
    oprot.writeBool(this.isCompleted);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_IS_PUBLIC_FIELD_DESC);
    oprot.writeBool(this.isPublic);
    oprot.writeFieldEnd();
    if (this.notes != null) {
      oprot.writeFieldBegin(_NOTES_FIELD_DESC);
      oprot.writeString(this.notes);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Todo(");

    ret.write("userID:");
    if (this.userID == null) {
      ret.write("null");
    } else {
      ret.write(this.userID);
    }

    ret.write(", ");
    ret.write("description:");
    if (this.description == null) {
      ret.write("null");
    } else {
      ret.write(this.description);
    }

    if (isSetDueDate()) {
      ret.write(", ");
      ret.write("dueDate:");
      ret.write(this.dueDate);
    }

    ret.write(", ");
    ret.write("id:");
    if (this.id == null) {
      ret.write("null");
    } else {
      ret.write(this.id);
    }

    ret.write(", ");
    ret.write("isCompleted:");
    ret.write(this.isCompleted);

    ret.write(", ");
    ret.write("isPublic:");
    ret.write(this.isPublic);

    if (isSetNotes()) {
      ret.write(", ");
      ret.write("notes:");
      if (this.notes == null) {
        ret.write("null");
      } else {
        ret.write(this.notes);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

