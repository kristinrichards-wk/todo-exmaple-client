/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library todo_service.src.todo_query_params;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:todo_service/todo_service.dart';
import 'package:base_service/base_service.dart';

/// Parameters for querying todos.
class TodoQueryParams implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TodoQueryParams");
  static final TField _INCLUDE_PUBLIC_FIELD_DESC = new TField("includePublic", TType.BOOL, 1);
  static final TField _INCLUDE_PRIVATE_FIELD_DESC = new TField("includePrivate", TType.BOOL, 2);
  static final TField _INCLUDE_COMPLETE_FIELD_DESC = new TField("includeComplete", TType.BOOL, 3);
  static final TField _INCLUDE_INCOMPLETE_FIELD_DESC = new TField("includeIncomplete", TType.BOOL, 4);

  bool _includePublic;
  static const int INCLUDEPUBLIC = 1;
  bool _includePrivate;
  static const int INCLUDEPRIVATE = 2;
  bool _includeComplete;
  static const int INCLUDECOMPLETE = 3;
  bool _includeIncomplete;
  static const int INCLUDEINCOMPLETE = 4;

  bool __isset_includePublic = false;
  bool __isset_includePrivate = false;
  bool __isset_includeComplete = false;
  bool __isset_includeIncomplete = false;

  TodoQueryParams() {
  }

  // includePublic
  bool get includePublic => this._includePublic;

  set includePublic(bool includePublic) {
    this._includePublic = includePublic;
    this.__isset_includePublic = true;
  }

  bool isSetIncludePublic() => this.__isset_includePublic;

  unsetIncludePublic() {
    this.__isset_includePublic = false;
  }

  // includePrivate
  bool get includePrivate => this._includePrivate;

  set includePrivate(bool includePrivate) {
    this._includePrivate = includePrivate;
    this.__isset_includePrivate = true;
  }

  bool isSetIncludePrivate() => this.__isset_includePrivate;

  unsetIncludePrivate() {
    this.__isset_includePrivate = false;
  }

  // includeComplete
  bool get includeComplete => this._includeComplete;

  set includeComplete(bool includeComplete) {
    this._includeComplete = includeComplete;
    this.__isset_includeComplete = true;
  }

  bool isSetIncludeComplete() => this.__isset_includeComplete;

  unsetIncludeComplete() {
    this.__isset_includeComplete = false;
  }

  // includeIncomplete
  bool get includeIncomplete => this._includeIncomplete;

  set includeIncomplete(bool includeIncomplete) {
    this._includeIncomplete = includeIncomplete;
    this.__isset_includeIncomplete = true;
  }

  bool isSetIncludeIncomplete() => this.__isset_includeIncomplete;

  unsetIncludeIncomplete() {
    this.__isset_includeIncomplete = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case INCLUDEPUBLIC:
        return this.includePublic;
      case INCLUDEPRIVATE:
        return this.includePrivate;
      case INCLUDECOMPLETE:
        return this.includeComplete;
      case INCLUDEINCOMPLETE:
        return this.includeIncomplete;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case INCLUDEPUBLIC:
        if (value == null) {
          unsetIncludePublic();
        } else {
          this.includePublic = value;
        }
        break;

      case INCLUDEPRIVATE:
        if (value == null) {
          unsetIncludePrivate();
        } else {
          this.includePrivate = value;
        }
        break;

      case INCLUDECOMPLETE:
        if (value == null) {
          unsetIncludeComplete();
        } else {
          this.includeComplete = value;
        }
        break;

      case INCLUDEINCOMPLETE:
        if (value == null) {
          unsetIncludeIncomplete();
        } else {
          this.includeIncomplete = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case INCLUDEPUBLIC:
        return isSetIncludePublic();
      case INCLUDEPRIVATE:
        return isSetIncludePrivate();
      case INCLUDECOMPLETE:
        return isSetIncludeComplete();
      case INCLUDEINCOMPLETE:
        return isSetIncludeIncomplete();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case INCLUDEPUBLIC:
          if (field.type == TType.BOOL) {
            this.includePublic = iprot.readBool();
            this.__isset_includePublic = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INCLUDEPRIVATE:
          if (field.type == TType.BOOL) {
            this.includePrivate = iprot.readBool();
            this.__isset_includePrivate = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INCLUDECOMPLETE:
          if (field.type == TType.BOOL) {
            this.includeComplete = iprot.readBool();
            this.__isset_includeComplete = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INCLUDEINCOMPLETE:
          if (field.type == TType.BOOL) {
            this.includeIncomplete = iprot.readBool();
            this.__isset_includeIncomplete = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_INCLUDE_PUBLIC_FIELD_DESC);
    oprot.writeBool(this.includePublic);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_INCLUDE_PRIVATE_FIELD_DESC);
    oprot.writeBool(this.includePrivate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_INCLUDE_COMPLETE_FIELD_DESC);
    oprot.writeBool(this.includeComplete);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_INCLUDE_INCOMPLETE_FIELD_DESC);
    oprot.writeBool(this.includeIncomplete);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TodoQueryParams(");

    if (isSetIncludePublic()) {
      ret.write("includePublic:");
      ret.write(this.includePublic);
    }

    if (isSetIncludePrivate()) {
      ret.write(", ");
      ret.write("includePrivate:");
      ret.write(this.includePrivate);
    }

    if (isSetIncludeComplete()) {
      ret.write(", ");
      ret.write("includeComplete:");
      ret.write(this.includeComplete);
    }

    if (isSetIncludeIncomplete()) {
      ret.write(", ");
      ret.write("includeIncomplete:");
      ret.write(this.includeIncomplete);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

