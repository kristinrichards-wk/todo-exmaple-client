/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library base_service.src.request_context;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:base_service/base_service.dart';

/// Common context for a request containing information about the requester.
class RequestContext implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("RequestContext");
  static final TField _CORRELATION_ID_FIELD_DESC = new TField("correlationID", TType.STRING, 1);
  static final TField _ACCOUNT_ID_FIELD_DESC = new TField("accountID", TType.STRING, 2);
  static final TField _MEMBERSHIP_ID_FIELD_DESC = new TField("membershipID", TType.STRING, 3);
  static final TField _USER_ID_FIELD_DESC = new TField("userID", TType.STRING, 4);
  static final TField _CLIENT_ID_FIELD_DESC = new TField("clientID", TType.STRING, 5);
  static final TField _AUTHORIZATION_TOKEN_FIELD_DESC = new TField("authorizationToken", TType.STRING, 6);

  /// The ID of the causing action
  String _correlationID;
  static const int CORRELATIONID = 1;
  /// Account resource identifier
  String _accountID;
  static const int ACCOUNTID = 2;
  /// Membership resource identifier
  String _membershipID;
  static const int MEMBERSHIPID = 3;
  /// User resource identifier
  String _userID;
  static const int USERID = 4;
  /// OAuth2 service client id
  String _clientID;
  static const int CLIENTID = 5;
  /// OAuth2 JWT
  String _authorizationToken;
  static const int AUTHORIZATIONTOKEN = 6;


  RequestContext() {
  }

  // correlationID
  /// The ID of the causing action
  String get correlationID => this._correlationID;

  /// The ID of the causing action
  set correlationID(String correlationID) {
    this._correlationID = correlationID;
  }

  bool isSetCorrelationID() => this.correlationID != null;

  unsetCorrelationID() {
    this.correlationID = null;
  }

  // accountID
  /// Account resource identifier
  String get accountID => this._accountID;

  /// Account resource identifier
  set accountID(String accountID) {
    this._accountID = accountID;
  }

  bool isSetAccountID() => this.accountID != null;

  unsetAccountID() {
    this.accountID = null;
  }

  // membershipID
  /// Membership resource identifier
  String get membershipID => this._membershipID;

  /// Membership resource identifier
  set membershipID(String membershipID) {
    this._membershipID = membershipID;
  }

  bool isSetMembershipID() => this.membershipID != null;

  unsetMembershipID() {
    this.membershipID = null;
  }

  // userID
  /// User resource identifier
  String get userID => this._userID;

  /// User resource identifier
  set userID(String userID) {
    this._userID = userID;
  }

  bool isSetUserID() => this.userID != null;

  unsetUserID() {
    this.userID = null;
  }

  // clientID
  /// OAuth2 service client id
  String get clientID => this._clientID;

  /// OAuth2 service client id
  set clientID(String clientID) {
    this._clientID = clientID;
  }

  bool isSetClientID() => this.clientID != null;

  unsetClientID() {
    this.clientID = null;
  }

  // authorizationToken
  /// OAuth2 JWT
  String get authorizationToken => this._authorizationToken;

  /// OAuth2 JWT
  set authorizationToken(String authorizationToken) {
    this._authorizationToken = authorizationToken;
  }

  bool isSetAuthorizationToken() => this.authorizationToken != null;

  unsetAuthorizationToken() {
    this.authorizationToken = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CORRELATIONID:
        return this.correlationID;
      case ACCOUNTID:
        return this.accountID;
      case MEMBERSHIPID:
        return this.membershipID;
      case USERID:
        return this.userID;
      case CLIENTID:
        return this.clientID;
      case AUTHORIZATIONTOKEN:
        return this.authorizationToken;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CORRELATIONID:
        if (value == null) {
          unsetCorrelationID();
        } else {
          this.correlationID = value;
        }
        break;

      case ACCOUNTID:
        if (value == null) {
          unsetAccountID();
        } else {
          this.accountID = value;
        }
        break;

      case MEMBERSHIPID:
        if (value == null) {
          unsetMembershipID();
        } else {
          this.membershipID = value;
        }
        break;

      case USERID:
        if (value == null) {
          unsetUserID();
        } else {
          this.userID = value;
        }
        break;

      case CLIENTID:
        if (value == null) {
          unsetClientID();
        } else {
          this.clientID = value;
        }
        break;

      case AUTHORIZATIONTOKEN:
        if (value == null) {
          unsetAuthorizationToken();
        } else {
          this.authorizationToken = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CORRELATIONID:
        return isSetCorrelationID();
      case ACCOUNTID:
        return isSetAccountID();
      case MEMBERSHIPID:
        return isSetMembershipID();
      case USERID:
        return isSetUserID();
      case CLIENTID:
        return isSetClientID();
      case AUTHORIZATIONTOKEN:
        return isSetAuthorizationToken();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CORRELATIONID:
          if (field.type == TType.STRING) {
            this.correlationID = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ACCOUNTID:
          if (field.type == TType.STRING) {
            this.accountID = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MEMBERSHIPID:
          if (field.type == TType.STRING) {
            this.membershipID = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERID:
          if (field.type == TType.STRING) {
            this.userID = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLIENTID:
          if (field.type == TType.STRING) {
            this.clientID = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AUTHORIZATIONTOKEN:
          if (field.type == TType.STRING) {
            this.authorizationToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.correlationID != null) {
      oprot.writeFieldBegin(_CORRELATION_ID_FIELD_DESC);
      oprot.writeString(this.correlationID);
      oprot.writeFieldEnd();
    }
    if (this.accountID != null) {
      oprot.writeFieldBegin(_ACCOUNT_ID_FIELD_DESC);
      oprot.writeString(this.accountID);
      oprot.writeFieldEnd();
    }
    if (this.membershipID != null) {
      oprot.writeFieldBegin(_MEMBERSHIP_ID_FIELD_DESC);
      oprot.writeString(this.membershipID);
      oprot.writeFieldEnd();
    }
    if (this.userID != null) {
      oprot.writeFieldBegin(_USER_ID_FIELD_DESC);
      oprot.writeString(this.userID);
      oprot.writeFieldEnd();
    }
    if (this.clientID != null) {
      oprot.writeFieldBegin(_CLIENT_ID_FIELD_DESC);
      oprot.writeString(this.clientID);
      oprot.writeFieldEnd();
    }
    if (this.authorizationToken != null) {
      oprot.writeFieldBegin(_AUTHORIZATION_TOKEN_FIELD_DESC);
      oprot.writeString(this.authorizationToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("RequestContext(");

    ret.write("correlationID:");
    if (this.correlationID == null) {
      ret.write("null");
    } else {
      ret.write(this.correlationID);
    }

    ret.write(", ");
    ret.write("accountID:");
    if (this.accountID == null) {
      ret.write("null");
    } else {
      ret.write(this.accountID);
    }

    ret.write(", ");
    ret.write("membershipID:");
    if (this.membershipID == null) {
      ret.write("null");
    } else {
      ret.write(this.membershipID);
    }

    ret.write(", ");
    ret.write("userID:");
    if (this.userID == null) {
      ret.write("null");
    } else {
      ret.write(this.userID);
    }

    ret.write(", ");
    ret.write("clientID:");
    if (this.clientID == null) {
      ret.write("null");
    } else {
      ret.write(this.clientID);
    }

    ret.write(", ");
    ret.write("authorizationToken:");
    if (this.authorizationToken == null) {
      ret.write("null");
    } else {
      ret.write(this.authorizationToken);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    if (correlationID == null) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "Required field 'correlationID' was not present! Struct: " + toString());
    }
    // check that fields of type enum have valid values
  }

}

