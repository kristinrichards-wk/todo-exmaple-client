/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library base_service.src.info;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:base_service/base_service.dart';

/// Information about the service
class Info implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Info");
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 1);
  static final TField _VERSION_FIELD_DESC = new TField("version", TType.STRING, 2);
  static final TField _REPO_FIELD_DESC = new TField("repo", TType.STRING, 3);
  static final TField _ACTIVE_REQUESTS_FIELD_DESC = new TField("activeRequests", TType.I64, 4);
  static final TField _METADATA_FIELD_DESC = new TField("metadata", TType.MAP, 5);

  /// Name of the service
  String _name;
  static const int NAME = 1;
  /// Deployed version of the service
  String _version;
  static const int VERSION = 2;
  /// Repository of service source code
  String _repo;
  static const int REPO = 3;
  /// Number of in-flight requests the service is currently processing
  int _activeRequests;
  static const int ACTIVEREQUESTS = 4;
  /// Additional metadata about the service. See individual service definitions.
  Map<String, String> _metadata;
  static const int METADATA = 5;

  bool __isset_activeRequests = false;

  Info() {
  }

  // name
  /// Name of the service
  String get name => this._name;

  /// Name of the service
  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // version
  /// Deployed version of the service
  String get version => this._version;

  /// Deployed version of the service
  set version(String version) {
    this._version = version;
  }

  bool isSetVersion() => this.version != null;

  unsetVersion() {
    this.version = null;
  }

  // repo
  /// Repository of service source code
  String get repo => this._repo;

  /// Repository of service source code
  set repo(String repo) {
    this._repo = repo;
  }

  bool isSetRepo() => this.repo != null;

  unsetRepo() {
    this.repo = null;
  }

  // activeRequests
  /// Number of in-flight requests the service is currently processing
  int get activeRequests => this._activeRequests;

  /// Number of in-flight requests the service is currently processing
  set activeRequests(int activeRequests) {
    this._activeRequests = activeRequests;
    this.__isset_activeRequests = true;
  }

  bool isSetActiveRequests() => this.__isset_activeRequests;

  unsetActiveRequests() {
    this.__isset_activeRequests = false;
  }

  // metadata
  /// Additional metadata about the service. See individual service definitions.
  Map<String, String> get metadata => this._metadata;

  /// Additional metadata about the service. See individual service definitions.
  set metadata(Map<String, String> metadata) {
    this._metadata = metadata;
  }

  bool isSetMetadata() => this.metadata != null;

  unsetMetadata() {
    this.metadata = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NAME:
        return this.name;
      case VERSION:
        return this.version;
      case REPO:
        return this.repo;
      case ACTIVEREQUESTS:
        return this.activeRequests;
      case METADATA:
        return this.metadata;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          this.version = value;
        }
        break;

      case REPO:
        if (value == null) {
          unsetRepo();
        } else {
          this.repo = value;
        }
        break;

      case ACTIVEREQUESTS:
        if (value == null) {
          unsetActiveRequests();
        } else {
          this.activeRequests = value;
        }
        break;

      case METADATA:
        if (value == null) {
          unsetMetadata();
        } else {
          this.metadata = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NAME:
        return isSetName();
      case VERSION:
        return isSetVersion();
      case REPO:
        return isSetRepo();
      case ACTIVEREQUESTS:
        return isSetActiveRequests();
      case METADATA:
        return isSetMetadata();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERSION:
          if (field.type == TType.STRING) {
            this.version = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REPO:
          if (field.type == TType.STRING) {
            this.repo = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ACTIVEREQUESTS:
          if (field.type == TType.I64) {
            this.activeRequests = iprot.readI64();
            this.__isset_activeRequests = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case METADATA:
          if (field.type == TType.MAP) {
            {
              TMap _map0 = iprot.readMapBegin();
              this.metadata = new Map<String, String>();
              for (int _i1 = 0; _i1 < _map0.length; ++_i1) {
                String _key2;
                String _val3;
                _key2 = iprot.readString();
                _val3 = iprot.readString();
                this.metadata[_key2] = _val3;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.version != null) {
      oprot.writeFieldBegin(_VERSION_FIELD_DESC);
      oprot.writeString(this.version);
      oprot.writeFieldEnd();
    }
    if (this.repo != null) {
      oprot.writeFieldBegin(_REPO_FIELD_DESC);
      oprot.writeString(this.repo);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ACTIVE_REQUESTS_FIELD_DESC);
    oprot.writeI64(this.activeRequests);
    oprot.writeFieldEnd();
    if (this.metadata != null) {
      oprot.writeFieldBegin(_METADATA_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.metadata.length));
        for (var elem5 in this.metadata.keys) {
          oprot.writeString(elem5);
          oprot.writeString(this.metadata[elem5]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Info(");

    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(", ");
    ret.write("version:");
    if (this.version == null) {
      ret.write("null");
    } else {
      ret.write(this.version);
    }

    ret.write(", ");
    ret.write("repo:");
    if (this.repo == null) {
      ret.write("null");
    } else {
      ret.write(this.repo);
    }

    if (isSetActiveRequests()) {
      ret.write(", ");
      ret.write("activeRequests:");
      ret.write(this.activeRequests);
    }

    if (isSetMetadata()) {
      ret.write(", ");
      ret.write("metadata:");
      if (this.metadata == null) {
        ret.write("null");
      } else {
        ret.write(this.metadata);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

